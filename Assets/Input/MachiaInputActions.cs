//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/MachiaInputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Machia.Input
{
    public partial class @MachiaInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MachiaInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MachiaInputActionMap"",
    ""maps"": [
        {
            ""name"": ""DefaultGameplay"",
            ""id"": ""c5731e34-22b6-4798-94fc-e748e9ffe897"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dd9976f0-6026-4dcf-8892-29b352446745"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionOne"",
                    ""type"": ""Button"",
                    ""id"": ""02a798c2-885a-4b53-bfb6-505fc3d64684"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionTwo"",
                    ""type"": ""Button"",
                    ""id"": ""144e1c12-692e-4fd1-b611-2fb7b8fdfeee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7cdfc92c-1b34-477b-8350-580f440ebfa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""74921a25-0925-48d0-9d2b-f504adb825f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1277cb76-a716-47b6-9dc9-3172547fddd5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""96593b29-8883-4b79-a348-597a7dc46928"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""de95c284-2b75-4ce2-8e95-1daa47b47b12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a1aab12e-60da-4d8d-92cf-801adc518880"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0cc2662c-1b10-4717-8e2d-9b6497f88d9f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e89e04ba-ea3f-498e-887e-983681810e43"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""76b7296f-0846-41ca-83a7-9263acbc2577"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ActionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aef25d1-a591-48b9-bd99-2480aeb9cb40"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""ActionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b328aaf-d9c5-40db-8386-391ccac5c674"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ActionTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0e7fbc5-e32f-4417-9fe0-87b7689f584c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""ActionTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bf5e336-420f-4e65-b297-7035ac5010a8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4eb0384a-4ff1-469b-b32b-d7aca3fd4cee"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc46e104-de9e-4380-b669-5ed67dc8a74a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6d6d2c-de3c-4c6b-8dde-aa291f5c6fb3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""47cae4d9-0164-45c7-826f-916a98c0ea19"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""ceb85572-e047-4674-a811-07d5f785e120"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""90ba6b2f-c377-4711-a750-36e1ac769c76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06b60652-925c-49e9-8ca3-d9225ee82548"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1968259-f74c-424b-af23-719e8c32a881"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ab35fc-603a-4416-8a89-3155234ded32"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad2d8069-e0e8-4be7-a8cf-09575a445471"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""PS4Controller"",
            ""bindingGroup"": ""PS4Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // DefaultGameplay
            m_DefaultGameplay = asset.FindActionMap("DefaultGameplay", throwIfNotFound: true);
            m_DefaultGameplay_Move = m_DefaultGameplay.FindAction("Move", throwIfNotFound: true);
            m_DefaultGameplay_ActionOne = m_DefaultGameplay.FindAction("ActionOne", throwIfNotFound: true);
            m_DefaultGameplay_ActionTwo = m_DefaultGameplay.FindAction("ActionTwo", throwIfNotFound: true);
            m_DefaultGameplay_Attack = m_DefaultGameplay.FindAction("Attack", throwIfNotFound: true);
            m_DefaultGameplay_Aim = m_DefaultGameplay.FindAction("Aim", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_Confirm = m_Menu.FindAction("Confirm", throwIfNotFound: true);
            m_Menu_Cancel = m_Menu.FindAction("Cancel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // DefaultGameplay
        private readonly InputActionMap m_DefaultGameplay;
        private IDefaultGameplayActions m_DefaultGameplayActionsCallbackInterface;
        private readonly InputAction m_DefaultGameplay_Move;
        private readonly InputAction m_DefaultGameplay_ActionOne;
        private readonly InputAction m_DefaultGameplay_ActionTwo;
        private readonly InputAction m_DefaultGameplay_Attack;
        private readonly InputAction m_DefaultGameplay_Aim;
        public struct DefaultGameplayActions
        {
            private @MachiaInputActions m_Wrapper;
            public DefaultGameplayActions(@MachiaInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_DefaultGameplay_Move;
            public InputAction @ActionOne => m_Wrapper.m_DefaultGameplay_ActionOne;
            public InputAction @ActionTwo => m_Wrapper.m_DefaultGameplay_ActionTwo;
            public InputAction @Attack => m_Wrapper.m_DefaultGameplay_Attack;
            public InputAction @Aim => m_Wrapper.m_DefaultGameplay_Aim;
            public InputActionMap Get() { return m_Wrapper.m_DefaultGameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultGameplayActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultGameplayActions instance)
            {
                if (m_Wrapper.m_DefaultGameplayActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnMove;
                    @ActionOne.started -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionOne;
                    @ActionOne.performed -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionOne;
                    @ActionOne.canceled -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionOne;
                    @ActionTwo.started -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionTwo;
                    @ActionTwo.performed -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionTwo;
                    @ActionTwo.canceled -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnActionTwo;
                    @Attack.started -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAttack;
                    @Aim.started -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_DefaultGameplayActionsCallbackInterface.OnAim;
                }
                m_Wrapper.m_DefaultGameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @ActionOne.started += instance.OnActionOne;
                    @ActionOne.performed += instance.OnActionOne;
                    @ActionOne.canceled += instance.OnActionOne;
                    @ActionTwo.started += instance.OnActionTwo;
                    @ActionTwo.performed += instance.OnActionTwo;
                    @ActionTwo.canceled += instance.OnActionTwo;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                }
            }
        }
        public DefaultGameplayActions @DefaultGameplay => new DefaultGameplayActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private IMenuActions m_MenuActionsCallbackInterface;
        private readonly InputAction m_Menu_Confirm;
        private readonly InputAction m_Menu_Cancel;
        public struct MenuActions
        {
            private @MachiaInputActions m_Wrapper;
            public MenuActions(@MachiaInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Confirm => m_Wrapper.m_Menu_Confirm;
            public InputAction @Cancel => m_Wrapper.m_Menu_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void SetCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterface != null)
                {
                    @Confirm.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnConfirm;
                    @Confirm.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnConfirm;
                    @Confirm.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnConfirm;
                    @Cancel.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnCancel;
                    @Cancel.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnCancel;
                    @Cancel.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnCancel;
                }
                m_Wrapper.m_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Confirm.started += instance.OnConfirm;
                    @Confirm.performed += instance.OnConfirm;
                    @Confirm.canceled += instance.OnConfirm;
                    @Cancel.started += instance.OnCancel;
                    @Cancel.performed += instance.OnCancel;
                    @Cancel.canceled += instance.OnCancel;
                }
            }
        }
        public MenuActions @Menu => new MenuActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_PS4ControllerSchemeIndex = -1;
        public InputControlScheme PS4ControllerScheme
        {
            get
            {
                if (m_PS4ControllerSchemeIndex == -1) m_PS4ControllerSchemeIndex = asset.FindControlSchemeIndex("PS4Controller");
                return asset.controlSchemes[m_PS4ControllerSchemeIndex];
            }
        }
        public interface IDefaultGameplayActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnActionOne(InputAction.CallbackContext context);
            void OnActionTwo(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnConfirm(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
    }
}
